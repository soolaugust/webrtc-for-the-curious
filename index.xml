<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on WebRTC for the Curious</title><link>https://webrtcforthecurious.com/</link><description>Recent content in Introduction on WebRTC for the Curious</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://webrtcforthecurious.com/index.xml" rel="self" type="application/rss+xml"/><item><title>What, Why and How</title><link>https://webrtcforthecurious.com/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/01-what-why-and-how/</guid><description>What is WebRTC. # WebRTC, short for Web Real-Time Communication, is both an API and a Protocol. The WebRTC protocol is a set of rules for two WebRTC agents to negotiate bi-directional secure real-time communication. The WebRTC API then allows developers to use the WebRTC protocol. The WebRTC API is specified only for Javascript.
A similar relationship would be HTTP and the fetch API. WebRTC the protocol would be HTTP, and WebRTC the API would be the fetch API.</description></item><item><title>Signaling</title><link>https://webrtcforthecurious.com/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/02-signaling/</guid><description>Why do I need signaling? # When you create a WebRTC agent it knows nothing about the other peer. It has no idea who it is going to connect with or what they are going to send! Signaling is the initial bootstrapping that makes the call possible. After these values are exchanged the WebRTC agents then can communicate directly with each other.
Signaling messages are just text. The WebRTC agents don&amp;rsquo;t care how they are transported.</description></item><item><title>Connecting</title><link>https://webrtcforthecurious.com/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/03-connecting/</guid><description>Why do I need a dedicated subsystem for connecting? # WebRTC will go to great lengths to achieve direct bi-directional communication between two WebRTC Agents. This connection style is also known as peer-to-peer. Establishing peer-to-peer connectivity can be difficult though. These agents could be in different networks with no direct connectivity!
In situations where direct connectivity does exist you can have other issues. In some cases, your clients don&amp;rsquo;t speak the same network protocols (UDP &amp;lt;-&amp;gt; TCP) or maybe IP Versions (IPv4 &amp;lt;-&amp;gt; IPv6).</description></item><item><title>Securing</title><link>https://webrtcforthecurious.com/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/04-securing/</guid><description>What security does WebRTC have? # Every WebRTC connection is authenticated and encrypted. You can be confident that a 3rd party can&amp;rsquo;t see what you are sending. They also can&amp;rsquo;t insert bogus messages. You can also be sure the WebRTC Agent that generated the Session Description is the one you are communicating with.
It is very important that no one tampers with those messages. It is ok if a 3rd party reads the Session Description in transit.</description></item><item><title>Media Communication</title><link>https://webrtcforthecurious.com/docs/05-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/05-media-communication/</guid><description>What do I get from WebRTC&amp;rsquo;s media communication? # WebRTC allows you to send and receive an unlimited amount of audio and video streams. You can add and remove these streams at anytime during a call. These streams could all be independent, or they could be bundled together! You could send a video feed of your desktop, and then include audio/video from your webcam.
The WebRTC protocol is codec agnostic.</description></item><item><title>Data Communication</title><link>https://webrtcforthecurious.com/docs/06-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/06-data-communication/</guid><description>What is Data Channel? # Questions From The Curious # What’s the difference with TCP? How many channels can we have? Why do we need data channels? Any limit in data size? (max size, 0 byte data?) Any limit in bandwidth? Can we send binary data? JSON? What’s good about data channels? Difference from WebSocket? How about congestion control? How about latency? What technologies are used in data channels?</description></item><item><title>Applied WebRTC</title><link>https://webrtcforthecurious.com/docs/08-applied-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/08-applied-webrtc/</guid><description>Applied WebRTC # This section is under construction, and needs your help! Applied WebRTC is a chapter about how applications get built &amp;ldquo;in the real world&amp;rdquo;, so it wouldn&amp;rsquo;t be complete without extensive input from the community. If you know something about WebRTC application architecture that isn&amp;rsquo;t covered in this chapter, we want to know about it!
By Use Case # The technologies behind WebRTC aren&amp;rsquo;t just for video chatting &amp;ndash; since WebRTC is a generic real-time framework, applications are limitless.</description></item><item><title>What Can You Build?</title><link>https://webrtcforthecurious.com/docs/07-what-can-you-build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/07-what-can-you-build/</guid><description/></item><item><title>Debugging</title><link>https://webrtcforthecurious.com/docs/09-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/09-debugging/</guid><description>Debugging # Reduce Surface Area # Network Debugging # Media Debugging # Data Debugging #</description></item><item><title>History</title><link>https://webrtcforthecurious.com/docs/10-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/10-history-of-webrtc/</guid><description>History # This section is ongoing and we don’t have all the facts yet. We are conducting interviews and build a history of digital communication.
Pre-RTP # RTP # SDP # ICE # SRTP # SCTP # DTLS #</description></item><item><title>FAQ</title><link>https://webrtcforthecurious.com/docs/11-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/11-faq/</guid><description>FAQ #</description></item><item><title>Contributing</title><link>https://webrtcforthecurious.com/docs/12-contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/12-contributing/</guid><description>Contributing #</description></item></channel></rss>